# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from src.proto import hello_pb2 as src_dot_proto_dot_hello__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in src/proto/hello_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVector = channel.unary_unary(
                '/vector.VectorService/GetVector',
                request_serializer=src_dot_proto_dot_hello__pb2.VectorRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_hello__pb2.VectorResponse.FromString,
                _registered_method=True)
        self.InsertVector = channel.unary_unary(
                '/vector.VectorService/InsertVector',
                request_serializer=src_dot_proto_dot_hello__pb2.InsertVectorRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_hello__pb2.InsertVectorResponse.FromString,
                _registered_method=True)
        self.GetVectorByKey = channel.unary_unary(
                '/vector.VectorService/GetVectorByKey',
                request_serializer=src_dot_proto_dot_hello__pb2.GetVectorByKeyRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_hello__pb2.VectorResponse.FromString,
                _registered_method=True)
        self.InsertSample = channel.unary_unary(
                '/vector.VectorService/InsertSample',
                request_serializer=src_dot_proto_dot_hello__pb2.InsertSampleRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_hello__pb2.InsertSampleResponse.FromString,
                _registered_method=True)


class VectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetVector(self, request, context):
        """ベクトルをIDで取得するRPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertVector(self, request, context):
        """Key-Value形式でベクトルを挿入するRPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVectorByKey(self, request, context):
        """Key-Value形式でベクトルをキーで取得するRPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertSample(self, request, context):
        """指定されたIDで自動生成されたベクトルを挿入するRPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetVector': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVector,
                    request_deserializer=src_dot_proto_dot_hello__pb2.VectorRequest.FromString,
                    response_serializer=src_dot_proto_dot_hello__pb2.VectorResponse.SerializeToString,
            ),
            'InsertVector': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertVector,
                    request_deserializer=src_dot_proto_dot_hello__pb2.InsertVectorRequest.FromString,
                    response_serializer=src_dot_proto_dot_hello__pb2.InsertVectorResponse.SerializeToString,
            ),
            'GetVectorByKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVectorByKey,
                    request_deserializer=src_dot_proto_dot_hello__pb2.GetVectorByKeyRequest.FromString,
                    response_serializer=src_dot_proto_dot_hello__pb2.VectorResponse.SerializeToString,
            ),
            'InsertSample': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertSample,
                    request_deserializer=src_dot_proto_dot_hello__pb2.InsertSampleRequest.FromString,
                    response_serializer=src_dot_proto_dot_hello__pb2.InsertSampleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vector.VectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vector.VectorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector.VectorService/GetVector',
            src_dot_proto_dot_hello__pb2.VectorRequest.SerializeToString,
            src_dot_proto_dot_hello__pb2.VectorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector.VectorService/InsertVector',
            src_dot_proto_dot_hello__pb2.InsertVectorRequest.SerializeToString,
            src_dot_proto_dot_hello__pb2.InsertVectorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVectorByKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector.VectorService/GetVectorByKey',
            src_dot_proto_dot_hello__pb2.GetVectorByKeyRequest.SerializeToString,
            src_dot_proto_dot_hello__pb2.VectorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vector.VectorService/InsertSample',
            src_dot_proto_dot_hello__pb2.InsertSampleRequest.SerializeToString,
            src_dot_proto_dot_hello__pb2.InsertSampleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
